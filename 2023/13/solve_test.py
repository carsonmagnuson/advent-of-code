import solve
def test_parse():
    assert solve.parse("1") == [
        [
            ["#", ".", "#", "#", ".", ".", "#", "#", "."],
            [".", ".", "#", ".", "#", "#", ".", "#", "."],
            ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
            [".", ".", "#", ".", "#", "#", ".", "#", "."],
            [".", ".", "#", "#", ".", ".", "#", "#", "."],
            ["#", ".", "#", ".", "#", "#", ".", "#", "."],
        ],
        [
            ["#", ".", ".", ".", "#", "#", ".", ".", "#"],
            ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
            [".", ".", "#", "#", ".", ".", "#", "#", "#"],
            ["#", "#", "#", "#", "#", ".", "#", "#", "."],
            ["#", "#", "#", "#", "#", ".", "#", "#", "."],
            [".", ".", "#", "#", ".", ".", "#", "#", "#"],
            ["#", ".", ".", ".", ".", "#", ".", ".", "#"],
        ],
    ]


def test_mirrorline():
    assert solve.mirrorline([
            ["#", ".", "#", "#", ".", ".", "#", "#", "."],
            [".", ".", "#", ".", "#", "#", ".", "#", "."],
            ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
            [".", ".", "#", ".", "#", "#", ".", "#", "."],
            [".", ".", "#", "#", ".", ".", "#", "#", "."],
            ["#", ".", "#", ".", "#", "#", ".", "#", "."],
        ]) == 5

def test_diff():
    assert solve.diff(["A", "B", "C"], ["A", "B", "c"]) == 1

def test_ripple():
    assert solve.ripple([
            ["#", ".", "#", "#", ".", ".", "#", "#", "."],
            [".", ".", "#", ".", "#", "#", ".", "#", "."],
            ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
            [".", ".", "#", ".", "#", "#", ".", "#", "."],
            [".", ".", "#", "#", ".", ".", "#", "#", "."],
            ["#", ".", "#", ".", "#", "#", ".", "#", "."],
        ], 2, 1) == True

def test_smudge():
    assert solve.smudge([
            ["#", ".", "#", "#", ".", ".", "#", "#", "."],
            [".", ".", "#", ".", "#", "#", ".", "#", "."],
            ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
            ["#", "#", ".", ".", ".", ".", ".", ".", "#"],
            [".", ".", "#", ".", "#", "#", ".", "#", "."],
            [".", ".", "#", "#", ".", ".", "#", "#", "."],
            ["#", ".", "#", ".", "#", "#", ".", "#", "."],
        ]) == 300

def test_a():
    assert solve.a("1") == 405

def test_b():
    assert solve.b("1") == 400
